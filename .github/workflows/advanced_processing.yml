name: Unzip and Summarize Zip Contents

on:
  workflow_dispatch:

jobs:
  unzip-and-combine:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # allows pushing changes with GITHUB_TOKEN
    steps:
      - name: Checkout repository
        uses: actions/checkout

      # … your earlier steps …

      - name: 🧠 Intelligent content processing
        id: processor
        uses: actions/github-script@v6
        env:
          TIMESTAMP: ${{ steps.timestamp.outputs.TIMESTAMP }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const yaml = require('js-yaml');
-           const glob = require('glob');
+           const globLib = require('glob');

            // 1. Combine all files into data.txt
-           const allFiles = glob.sync('extracted_assets/**/*', { nodir: true });
+           const allFiles = globLib.sync('extracted_assets/**/*', { nodir: true });

            allFiles.forEach(file => {
              try {
                const content = fs.readFileSync(file, 'utf-8');
                const relativePath = path.relative('extracted_assets', file);
                combinedContent += `===== ${relativePath} =====\n${content}\n\n`;
              } catch (e) {
                core.warning(`Skipped ${file}: ${e.message}`);
              }
            });

            fs.writeFileSync('data.txt', combinedContent);
            core.info(`📝 Combined ${allFiles.length} files into data.txt`);

            // 2. Generate individual summaries
            const config = yaml.load(fs.readFileSync('config.yml', 'utf8'));
            const patterns = config.folders || [];
            const summaryDir = 'generated';
            fs.mkdirSync(summaryDir, { recursive: true });

            let generatedCount = 0;
            for (const pattern of patterns) {
-             const matchedFiles = glob.sync(`extracted_assets/${pattern}`, { nodir: true });
+             const matchedFiles = globLib.sync(`extracted_assets/${pattern}`, { nodir: true });

              for (const file of matchedFiles) {
                try {
                  const content = fs.readFileSync(file, 'utf-8');
                  const relativePath = path.relative('extracted_assets', file);
                  const safeName = relativePath
                    .replace(/\//g, '꞉')
                    .replace(/\\/g, '꞉')
                    .replace(/\s+/g, '🝗');
                  const summaryFile = `${summaryDir}/${safeName}_${process.env.TIMESTAMP}.txt`;

                  fs.writeFileSync(summaryFile, `🔖 ${relativePath}\n\n${content}`);
                  generatedCount++;
                } catch (e) {
                  core.warning(`Skipped ${file}: ${e.message}`);
                }
              }
            }
            core.info(`✨ Generated ${generatedCount} summaries`);
            core.setOutput('changes', generatedCount > 0 ? 'true' : 'false');
