name: Generate Summaries including inside ZIPs

on:
  push:
    branches: [main]

jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x

    - name: Install PyYAML and unzip tool
      run: |
        pip install pyyaml
        sudo apt-get update && sudo apt-get install -y unzip

    - name: Generate summaries including unzip
      run: |
        mkdir -p generated temp_unzip

        python3 <<EOF
import yaml
from pathlib import Path
import glob
from datetime import datetime
import subprocess
import shutil

timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

def process_file(p: Path):
    safe_name = p.name.replace(" ", "_")
    output_file = Path("generated") / f"{safe_name}-data-{timestamp}.txt"
    try:
        content = p.read_text(encoding="utf-8")
    except Exception as e:
        print(f"❌ Failed reading {p}: {e}")
        return
    with open(output_file, "w", encoding="utf-8") as out:
        out.write(f"({p})\n-\n{content}")
    print(f"✅ Wrote {output_file}")

def process_zip(zip_path: Path):
    temp_dir = Path("temp_unzip") / zip_path.stem
    if temp_dir.exists():
        shutil.rmtree(temp_dir)
    temp_dir.mkdir(parents=True)
    try:
        subprocess.run(["unzip", "-qq", str(zip_path), "-d", str(temp_dir)], check=True)
        # Recursively process files inside extracted folder
        for file_path in temp_dir.rglob("*"):
            if file_path.is_file():
                process_file(file_path)
    except Exception as e:
        print(f"❌ Failed to unzip {zip_path}: {e}")
    finally:
        # Cleanup extracted folder (optional - comment out if you want to keep)
        shutil.rmtree(temp_dir)

config_path = Path("config.yml")
if not config_path.exists():
    print("❌ config.yml not found")
    exit(1)

with open(config_path) as f:
    config = yaml.safe_load(f)

patterns = config.get("folders", [])
if not patterns:
    print("❌ No folders listed in config.yml")
    exit(1)

seen = set()
for pattern in patterns:
    for path in glob.glob(pattern, recursive=True):
        p = Path(path)
        if p.is_file() and p not in seen:
            seen.add(p)
            if p.suffix.lower() == ".zip":
                print(f"📦 Processing zip file: {p}")
                process_zip(p)
            else:
                process_file(p)
EOF

    - name: Commit summaries
      run: |
        git config user.name "Folder Bot"
        git config user.email "bot@example.com"
        git add generated/
        git commit -m "📄 Generated summaries including zip contents with timestamp" || echo "Nothing to commit"
        git push
