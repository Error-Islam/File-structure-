name: 🔁 Unzip, Process, and Summarize

on:
  workflow_dispatch:
  push:
    paths:
      - "config.yml"
      - "unzip-config.yml"

jobs:
  process:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: 🧾 Checkout
        uses: actions/checkout@v4

      - name: 🕒 Get timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: 📁 Ensure config files
        run: |
          if [ ! -f config.yml ]; then
            echo "folders:" > config.yml
            echo "  - '**/*.json'" >> config.yml
            echo "✅ Created default config.yml"
          fi
          if [ ! -f unzip-config.yml ]; then
            echo "unzip:" > unzip-config.yml
            echo "  - 'Fathoms.zip'" >> unzip-config.yml
            echo "✅ Created default unzip-config.yml"
          fi

      - name: 🧳 Unzip all ZIPs
        run: |
          mkdir -p extracted_assets
          yq eval '.unzip[]' unzip-config.yml | while read zipfile; do
            if [ -f "$zipfile" ]; then
              unzip -q "$zipfile" -d extracted_assets/
              echo "✅ Unzipped $zipfile"
            else
              echo "⚠️  Zip not found: $zipfile"
            fi
          done

      - name: 🧠 Intelligent content processing
        id: processor
        uses: actions/github-script@v6
        env:
          TIMESTAMP: ${{ steps.timestamp.outputs.TIMESTAMP }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const yaml = require('js-yaml');
            const globLib = require('glob');

            const combined = [];
            const allFiles = globLib.sync('extracted_assets/**/*', { nodir: true });

            allFiles.forEach(file => {
              try {
                const content = fs.readFileSync(file, 'utf-8');
                const relativePath = path.relative('extracted_assets', file);
                combined.push(`===== ${relativePath} =====\n${content}`);
              } catch (e) {
                core.warning(`Skipped ${file}: ${e.message}`);
              }
            });

            fs.writeFileSync('data.txt', combined.join('\n\n'));
            core.info(`📝 Combined ${allFiles.length} files into data.txt`);

            const config = yaml.load(fs.readFileSync('config.yml', 'utf8'));
            const patterns = config.folders || [];
            const outputDir = 'generated';
            fs.mkdirSync(outputDir, { recursive: true });

            let generated = 0;
            for (const pattern of patterns) {
              const files = globLib.sync(`extracted_assets/${pattern}`, { nodir: true });
              for (const file of files) {
                try {
                  const content = fs.readFileSync(file, 'utf-8');
                  const relPath = path.relative('extracted_assets', file);
                  const safeName = relPath.replace(/[\/\\]/g, '꞉').replace(/\s/g, '🝗');
                  const outPath = `${outputDir}/${safeName}_${process.env.TIMESTAMP}.txt`;
                  fs.writeFileSync(outPath, `🔖 ${relPath}\n\n${content}`);
                  generated++;
                } catch (e) {
                  core.warning(`Skipped ${file}: ${e.message}`);
                }
              }
            }

            core.setOutput('changes', generated > 0 ? 'true' : 'false');
            core.info(`✨ ${generated} summary files generated`);

      - name: 🧼 Cleanup
        run: rm -rf extracted_assets

      - name: 💾 Commit & push changes
        if: steps.processor.outputs.changes == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add data.txt generated/
          git diff --cached --quiet || git commit -m "🔄 Auto update summaries ${{ steps.timestamp.outputs.TIMESTAMP }}"
          git push

      - name: 🚀 Open PR (if not on main)
        if: steps.processor.outputs.changes == 'true' && github.ref == 'refs/heads/main'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "🔄 Auto update summaries ${{ steps.timestamp.outputs.TIMESTAMP }}"
          branch: auto/summaries-${{ steps.timestamp.outputs.TIMESTAMP }}
          title: "🔄 Summary update - ${{ steps.timestamp.outputs.TIMESTAMP }}"
          body: "Automated summary files generated from extracted content."
          
